/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package gr.open.marketplace.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import gr.open.marketplace.model.AdminIPConfiguration;
import gr.open.marketplace.model.AdminIPConfigurationModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AdminIPConfiguration service. Represents a row in the &quot;opengr_AdminIPConfiguration&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link gr.open.marketplace.model.AdminIPConfigurationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AdminIPConfigurationImpl}.
 * </p>
 *
 * @author cotria
 * @see AdminIPConfigurationImpl
 * @see gr.open.marketplace.model.AdminIPConfiguration
 * @see gr.open.marketplace.model.AdminIPConfigurationModel
 * @generated
 */
public class AdminIPConfigurationModelImpl extends BaseModelImpl<AdminIPConfiguration>
	implements AdminIPConfigurationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a admin i p configuration model instance should use the {@link gr.open.marketplace.model.AdminIPConfiguration} interface instead.
	 */
	public static final String TABLE_NAME = "opengr_AdminIPConfiguration";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "redirectUrl", Types.VARCHAR },
			{ "debug", Types.BOOLEAN },
			{ "mode_", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table opengr_AdminIPConfiguration (id_ LONG not null primary key,redirectUrl VARCHAR(200) null,debug BOOLEAN,mode_ INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table opengr_AdminIPConfiguration";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.gr.open.marketplace.model.AdminIPConfiguration"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.gr.open.marketplace.model.AdminIPConfiguration"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.gr.open.marketplace.model.AdminIPConfiguration"));

	public AdminIPConfigurationModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return AdminIPConfiguration.class;
	}

	public String getModelClassName() {
		return AdminIPConfiguration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("redirectUrl", getRedirectUrl());
		attributes.put("debug", getDebug());
		attributes.put("mode", getMode());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String redirectUrl = (String)attributes.get("redirectUrl");

		if (redirectUrl != null) {
			setRedirectUrl(redirectUrl);
		}

		Boolean debug = (Boolean)attributes.get("debug");

		if (debug != null) {
			setDebug(debug);
		}

		Integer mode = (Integer)attributes.get("mode");

		if (mode != null) {
			setMode(mode);
		}
	}

	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_id = id;
	}

	public String getRedirectUrl() {
		if (_redirectUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _redirectUrl;
		}
	}

	public void setRedirectUrl(String redirectUrl) {
		_redirectUrl = redirectUrl;
	}

	public boolean getDebug() {
		return _debug;
	}

	public boolean isDebug() {
		return _debug;
	}

	public void setDebug(boolean debug) {
		_debug = debug;
	}

	public int getMode() {
		return _mode;
	}

	public void setMode(int mode) {
		_mode = mode;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			AdminIPConfiguration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AdminIPConfiguration toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (AdminIPConfiguration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		AdminIPConfigurationImpl adminIPConfigurationImpl = new AdminIPConfigurationImpl();

		adminIPConfigurationImpl.setId(getId());
		adminIPConfigurationImpl.setRedirectUrl(getRedirectUrl());
		adminIPConfigurationImpl.setDebug(getDebug());
		adminIPConfigurationImpl.setMode(getMode());

		adminIPConfigurationImpl.resetOriginalValues();

		return adminIPConfigurationImpl;
	}

	public int compareTo(AdminIPConfiguration adminIPConfiguration) {
		long primaryKey = adminIPConfiguration.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		AdminIPConfiguration adminIPConfiguration = null;

		try {
			adminIPConfiguration = (AdminIPConfiguration)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = adminIPConfiguration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<AdminIPConfiguration> toCacheModel() {
		AdminIPConfigurationCacheModel adminIPConfigurationCacheModel = new AdminIPConfigurationCacheModel();

		adminIPConfigurationCacheModel.id = getId();

		adminIPConfigurationCacheModel.redirectUrl = getRedirectUrl();

		String redirectUrl = adminIPConfigurationCacheModel.redirectUrl;

		if ((redirectUrl != null) && (redirectUrl.length() == 0)) {
			adminIPConfigurationCacheModel.redirectUrl = null;
		}

		adminIPConfigurationCacheModel.debug = getDebug();

		adminIPConfigurationCacheModel.mode = getMode();

		return adminIPConfigurationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", redirectUrl=");
		sb.append(getRedirectUrl());
		sb.append(", debug=");
		sb.append(getDebug());
		sb.append(", mode=");
		sb.append(getMode());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("gr.open.marketplace.model.AdminIPConfiguration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>redirectUrl</column-name><column-value><![CDATA[");
		sb.append(getRedirectUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>debug</column-name><column-value><![CDATA[");
		sb.append(getDebug());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mode</column-name><column-value><![CDATA[");
		sb.append(getMode());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AdminIPConfiguration.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			AdminIPConfiguration.class
		};
	private long _id;
	private String _redirectUrl;
	private boolean _debug;
	private int _mode;
	private AdminIPConfiguration _escapedModelProxy;
}